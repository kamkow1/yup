import "#std/Debug.yup";
import "#std/Memory.yup";
import "#std/Bool.yup";
import "#std/Result.yup";

#macro VEC_INIT_CAP() 1:i64;
#macro VEC_INIT_TOT() 0:i64;

pub Vec: struct {
    items: **void;
    cap: i64;
    total: i64;

    pub new: fnc() -> Vec {
        return Vec.!{
            .cap    = #VEC_INIT_CAP(),
            .total  = #VEC_INIT_TOT(),
            .items  = cast(alloc_memory(sizeof(*void) * #VEC_INIT_CAP()), **void),
        };
    }

    pub delete: fnc(self) {
        free_memory(cast(Vec::self.items.*, *void));
    }

    resize: fnc(self, const new_cap: i64) {
        const new_size = sizeof(*void) * new_cap;
        const original_size = sizeof(Vec::self.items.*);

        //const new_items: **void = realloc_memory(cast(Vec::self.items.*, *void), original_size, new_size);
    }
}
