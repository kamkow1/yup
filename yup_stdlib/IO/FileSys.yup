import "#std/Memory.yup";
import "#std/Errors.yup";
import "#std/Null.yup";

pub _IO_FILE: struct;

extern fopen: fnc(const filename: *i8, const mode: *i8) -> *_IO_FILE;
extern fclose: fnc(const file: *_IO_FILE) -> i32;

pub File: struct {
    real_handle:    *_IO_FILE;
    name:           *i8;

    pub new: fnc(const _name: *i8) -> *File {
        const f: *File = alloc_memory(sizeof(File));
        File::f.name = _name;
        return f;
    }

    pub open: fnc(self, const mode: *i8) {
        File::self.real_handle = fopen(File::self.name.*, mode);
        if File::self.real_handle.* == CNullptr:*_IO_FILE { 
            Errors::latest_reason("failed to open file");
            Errors::raise_code(1);
        }
    }

    pub handle: fnc(self) -> *_IO_FILE {
		return File::self.real_handle.*;
    }
    
    pub close: fnc(self) {
        // 0 -> closed successfully
        if fclose(File::self.handle()) != 0 {
			Errors::latest_reason("failed to close file");
			Errors::raise_code(1);
        }
        
        free_memory(cast(self, *void));
        self = CNullptr:*File;
    }
}

