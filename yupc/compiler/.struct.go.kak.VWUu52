package compiler

import (
	"github.com/kamkow1/yup/yupc/parser"
	"tinygo.org/x/go-llvm"
)

type Field struct {
    Name string
    Type llvm.Type
}

type Structure struct {
	Name   string
	Fields []Field
}

func (v *AstVisitor) VisitStructField(ctx *parser.StructFieldContext) any {
	return Field{
		Name: ctx.Identifier().GetText(),
		Type: v.Visit(ctx.TypeAnnotation()).(llvm.Type),
    	}
}

func (v *AstVisitor) VisitStructDeclaration(ctx *parser.StructDeclarationContext) any {
	name := ctx.Identifier().GetText()

	var fields []Field
	for _, fld := range ctx.AllStructField() {
		fields = append(fields, v.Visit(fld).(Field))
	}

	strct := Structure{
		Name:    name,
		Fields: fields,
    	}

    	CompilationUnits.Peek().Structs[name] = strct

	var fieldTypes []llvm.Type
	for _, fld := range fields {
		fieldTypes = append(fieldTypes, fld.Type)
    	}

	newctx := CompilationUnits.Peek().Module.Context()
	_ :w
	= newctx.DIBuilder
	
    	return strct
}

